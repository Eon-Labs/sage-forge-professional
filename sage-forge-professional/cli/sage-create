#!/usr/bin/env python3
"""
üî• SAGE-Forge Strategy/Actor Generator

Professional CLI tool for generating NT-native templates.
"""

import sys
import argparse
from pathlib import Path


def create_strategy(name: str, strategy_type: str = "basic"):
    """Create a new NT-native strategy template."""
    
    strategy_template = f'''#!/usr/bin/env python3
"""
{name} - SAGE-Forge NT-Native Strategy

Generated by SAGE-Forge CLI - Professional trading strategy template.
"""

from decimal import Decimal
from nautilus_trader.model.data import Bar
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.trading.strategy import Strategy
from rich.console import Console

from sage_forge.core.config import get_config
from sage_forge.risk.position_sizer import RealisticPositionSizer

console = Console()


class {name}(Strategy):
    """
    Professional NT-native strategy generated by SAGE-Forge CLI.
    
    Features:
    - Full NautilusTrader compliance
    - Professional risk management
    - Self-contained dependencies
    """
    
    def __init__(self, config):
        super().__init__(config)
        
        # SAGE-Forge configuration
        self.sage_config = get_config()
        
        # Professional position sizing
        self.position_sizer = RealisticPositionSizer()
        
        # Strategy parameters
        self.fast_period = config.fast_period
        self.slow_period = config.slow_period
        
    def on_start(self):
        """Initialize strategy."""
        self.subscribe_bars(self.config.bar_type)
        console.log(f"üöÄ {{name}} strategy started")
        
    def on_bar(self, bar: Bar):
        """Process new bar data."""
        # Implement your trading logic here
        
        # Example: Get position size
        position_size = self.position_sizer.get_recommended_position_size()
        
        # Example: Create order
        # order = self.order_factory.market(
        #     instrument_id=bar.bar_type.instrument_id,
        #     order_side=OrderSide.BUY,
        #     quantity=position_size
        # )
        # self.submit_order(order)
        
        pass
        
    def on_stop(self):
        """Strategy shutdown."""
        console.log(f"‚èπÔ∏è {{name}} strategy stopped")
'''

    # Write strategy file
    strategy_path = Path(f"src/sage_forge/strategies/{name.lower()}_strategy.py")
    strategy_path.parent.mkdir(parents=True, exist_ok=True)
    strategy_path.write_text(strategy_template)
    
    print(f"‚úÖ Created strategy: {strategy_path}")
    print(f"üöÄ Next steps:")
    print(f"  1. Edit: {strategy_path}")
    print(f"  2. Validate: uv run sage-validate --strategy {name}")
    print(f"  3. Test: uv run python tests/test_{name.lower()}_strategy.py")


def create_actor(name: str):
    """Create a new NT-native actor template."""
    
    actor_template = f'''#!/usr/bin/env python3
"""
{name} - SAGE-Forge NT-Native Actor

Generated by SAGE-Forge CLI - Professional actor template.
"""

from nautilus_trader.common.actor import Actor
from rich.console import Console

console = Console()


class {name}(Actor):
    """
    Professional NT-native actor generated by SAGE-Forge CLI.
    
    Features:
    - Full NautilusTrader compliance
    - Professional event handling
    - Self-contained dependencies
    """
    
    def __init__(self, config=None):
        super().__init__()
        self.config = config or {{}}
        
    def on_start(self):
        """Initialize actor."""
        console.log(f"üöÄ {{name}} actor started")
        
    def on_stop(self):
        """Actor shutdown."""
        console.log(f"‚èπÔ∏è {{name}} actor stopped")
'''

    # Write actor file
    actor_path = Path(f"src/sage_forge/actors/{name.lower()}_actor.py")
    actor_path.parent.mkdir(parents=True, exist_ok=True)
    actor_path.write_text(actor_template)
    
    print(f"‚úÖ Created actor: {actor_path}")
    print(f"üöÄ Next steps:")
    print(f"  1. Edit: {actor_path}")
    print(f"  2. Validate: uv run sage-validate --actor {name}")
    print(f"  3. Test: uv run python tests/test_{name.lower()}_actor.py")


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(description="SAGE-Forge Strategy/Actor Generator")
    parser.add_argument("component_type", choices=["strategy", "actor"], help="Component type to create")
    parser.add_argument("name", help="Component name (e.g., TiRexStrategy)")
    parser.add_argument("--type", default="basic", help="Strategy type (basic, ensemble, etc.)")
    
    args = parser.parse_args()
    
    print(f"üî• SAGE-Forge CLI Generator")
    print(f"Creating {args.component_type}: {args.name}")
    
    if args.component_type == "strategy":
        create_strategy(args.name, args.type)
    elif args.component_type == "actor":
        create_actor(args.name)
    
    print("‚úÖ Generation complete!")


if __name__ == "__main__":
    main()