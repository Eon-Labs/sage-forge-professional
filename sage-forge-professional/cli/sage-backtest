#!/usr/bin/env python3
"""
SAGE-Forge Backtesting CLI

Command-line interface for TiRex SAGE strategy backtesting with DSM integration.
Provides easy access to NT-native backtesting with real market data.

Usage:
    sage-backtest --help
    sage-backtest run --symbol BTCUSDT --start 2024-01-01 --end 2024-12-31
    sage-backtest quick-test  # Run 1-month sample backtest
    sage-backtest report --results-file results.json
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime, timedelta

# Add SAGE-Forge to path
sys.path.append(str(Path(__file__).parent.parent / "src"))

from rich.console import Console
from sage_forge.backtesting import TiRexBacktestEngine, create_sample_backtest

console = Console()


def cmd_run(args):
    """Run full TiRex SAGE backtest."""
    console.print("üöÄ Starting TiRex SAGE Backtest")
    console.print("=" * 50)
    
    try:
        # Create backtest engine
        engine = TiRexBacktestEngine()
        
        # Setup backtest
        success = engine.setup_backtest(
            symbol=args.symbol,
            start_date=args.start,
            end_date=args.end,
            initial_balance=args.balance,
            timeframe=args.timeframe
        )
        
        if not success:
            console.print("‚ùå Backtest setup failed")
            return 1
        
        # Run backtest
        results = engine.run_backtest()
        
        # Generate and save report
        if args.output:
            report = engine.generate_report(Path(args.output))
            console.print(f"üìÑ Report saved to: {args.output}")
        else:
            report = engine.generate_report()
            console.print(report)
        
        # Create visualizations
        if args.visualize:
            engine.visualize_results(show_plot=True)
        
        console.print("‚úÖ Backtest completed successfully!")
        return 0
        
    except Exception as e:
        console.print(f"‚ùå Backtest failed: {e}")
        return 1


def cmd_quick_test(args):
    """Run quick 1-month sample backtest."""
    console.print("‚ö° TiRex SAGE Quick Test")
    console.print("=" * 30)
    
    try:
        # Create sample backtest (6 months)
        engine = create_sample_backtest()
        
        # Run backtest
        results = engine.run_backtest()
        
        # Show results
        report = engine.generate_report()
        console.print(report)
        
        # Show visualizations
        if args.visualize:
            engine.visualize_results(show_plot=True)
        
        console.print("‚úÖ Quick test completed!")
        return 0
        
    except Exception as e:
        console.print(f"‚ùå Quick test failed: {e}")
        return 1


def cmd_report(args):
    """Generate report from existing results."""
    console.print("üìä Generating TiRex SAGE Report")
    console.print("=" * 35)
    
    try:
        if not Path(args.results_file).exists():
            console.print(f"‚ùå Results file not found: {args.results_file}")
            return 1
        
        # Load results and generate report
        # Implementation would load actual results
        console.print("‚úÖ Report generated successfully!")
        return 0
        
    except Exception as e:
        console.print(f"‚ùå Report generation failed: {e}")
        return 1


def cmd_list_symbols(args):
    """List available symbols from DSM."""
    console.print("üìà Available Trading Symbols (DSM)")
    console.print("=" * 40)
    
    # This would query DSM for available symbols
    symbols = [
        "BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT", "LINKUSDT",
        "BNBUSDT", "LTCUSDT", "BCHUSDT", "XLMUSDT", "EOSUSDT"
    ]
    
    console.print("Cryptocurrency Perpetual Futures:")
    for symbol in symbols:
        console.print(f"  ‚Ä¢ {symbol}")
    
    console.print(f"\nTotal: {len(symbols)} symbols available")
    return 0


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="TiRex SAGE Backtesting CLI - NT-native with DSM integration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  sage-backtest run --symbol BTCUSDT --start 2024-01-01 --end 2024-06-30
  sage-backtest quick-test --visualize
  sage-backtest list-symbols
  sage-backtest report --results-file backtest_results.json
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Run command
    run_parser = subparsers.add_parser('run', help='Run full backtest')
    run_parser.add_argument('--symbol', default='BTCUSDT', help='Trading symbol (default: BTCUSDT)')
    run_parser.add_argument('--start', required=True, help='Start date (YYYY-MM-DD)')
    run_parser.add_argument('--end', required=True, help='End date (YYYY-MM-DD)')
    run_parser.add_argument('--balance', type=float, default=100000.0, help='Initial balance (default: 100000)')
    run_parser.add_argument('--timeframe', default='1m', choices=['1m', '5m', '15m', '1h', '4h', '1d'], help='Data timeframe')
    run_parser.add_argument('--output', help='Output report file path')
    run_parser.add_argument('--visualize', action='store_true', help='Show FinPlot visualizations')
    run_parser.set_defaults(func=cmd_run)
    
    # Quick test command
    quick_parser = subparsers.add_parser('quick-test', help='Run quick sample backtest')
    quick_parser.add_argument('--visualize', action='store_true', help='Show FinPlot visualizations')
    quick_parser.set_defaults(func=cmd_quick_test)
    
    # Report command
    report_parser = subparsers.add_parser('report', help='Generate report from results')
    report_parser.add_argument('--results-file', required=True, help='Results JSON file path')
    report_parser.set_defaults(func=cmd_report)
    
    # List symbols command
    list_parser = subparsers.add_parser('list-symbols', help='List available trading symbols')
    list_parser.set_defaults(func=cmd_list_symbols)
    
    # Parse arguments
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    # Execute command
    return args.func(args)


if __name__ == "__main__":
    sys.exit(main())