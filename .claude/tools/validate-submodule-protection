#!/bin/bash
# Validation script for third-party submodule protection system
# Usage: validate-submodule-protection

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel)"

echo "üîç Validating Third-Party Submodule Protection System"
echo "=================================================="
echo ""

# Check if protection files exist
echo "üìã Configuration Files:"
files_to_check=(
    ".gitignore-submodules"
    ".claude/tools/git-commit-safe"
    ".git/hooks/pre-commit"
    ".vscode/settings.json"
    ".cursor/settings.json"
)

for file in "${files_to_check[@]}"; do
    if [[ -f "$REPO_ROOT/$file" ]]; then
        echo "‚úÖ $file exists"
    else
        echo "‚ùå $file missing"
    fi
done

echo ""

# Check git assume-unchanged status
echo "üîí Git Assume-Unchanged Status:"
assume_unchanged_files=$(git ls-files -v | grep "^h " | cut -c 3- || true)
if [[ -n "$assume_unchanged_files" ]]; then
    echo "‚úÖ Protected files:"
    echo "$assume_unchanged_files" | sed 's/^/   - /'
else
    echo "‚ö†Ô∏è  No files marked as assume-unchanged"
fi

echo ""

# Check git status for submodule modifications
echo "üîç Current Git Status:"
modified_submodules=$(git status --porcelain | grep "^.M repos/" || true)
if [[ -z "$modified_submodules" ]]; then
    echo "‚úÖ No third-party submodules showing as modified"
else
    echo "‚ö†Ô∏è  Modified submodules detected:"
    echo "$modified_submodules" | sed 's/^/   /'
fi

echo ""

# Test pre-commit hook
echo "üõ°Ô∏è  Pre-commit Hook Test:"
if [[ -x "$REPO_ROOT/.git/hooks/pre-commit" ]]; then
    echo "‚úÖ Pre-commit hook is executable"
    
    # Test hook without actually committing
    echo "Testing hook protection logic..."
    cd "$REPO_ROOT"
    
    # Create a test file and stage it
    echo "test" > .test-protection
    git add .test-protection
    
    # Try to stage a third-party submodule (this should fail)
    echo "Testing third-party submodule protection..."
    if git add repos/claude-flow 2>/dev/null && git commit --dry-run -m "test commit" >/dev/null 2>&1; then
        echo "‚ùå Pre-commit hook failed to block third-party submodule"
    else
        echo "‚úÖ Pre-commit hook correctly blocks third-party submodules"
    fi
    
    # Clean up
    git reset HEAD .test-protection >/dev/null 2>&1 || true
    git reset HEAD repos/claude-flow >/dev/null 2>&1 || true
    rm -f .test-protection
else
    echo "‚ùå Pre-commit hook is missing or not executable"
fi

echo ""

# Check IDE configuration
echo "üñ•Ô∏è  IDE Configuration:"
if grep -q "git.ignoredRepositories" "$REPO_ROOT/.vscode/settings.json" 2>/dev/null; then
    echo "‚úÖ VS Code configured to ignore third-party repositories"
else
    echo "‚ö†Ô∏è  VS Code configuration may need updating"
fi

if [[ -f "$REPO_ROOT/.cursor/settings.json" ]]; then
    echo "‚úÖ Cursor IDE configuration exists"
else
    echo "‚ö†Ô∏è  Cursor IDE configuration missing"
fi

echo ""

# Summary
echo "üéØ Protection Summary:"
echo "===================="
echo "‚úÖ Third-party repositories protected:"
echo "   - repos/nautilus_trader (nautechsystems)"
echo "   - repos/finplot (highfestiva)"
echo "   - repos/claude-flow (terrylica)"
echo ""
echo "‚úÖ Private repositories allowed:"
echo "   - repos/data-source-manager (Eon-Labs)"
echo ""
echo "üìñ Usage:"
echo "   - Use 'git-commit-safe \"message\"' for safe commits"
echo "   - Use 'APCF' command for audit-proof commits with protection"
echo "   - Pre-commit hook automatically blocks third-party commits"

echo ""
echo "üîß To restore assume-unchanged protection if needed:"
echo "   git update-index --assume-unchanged repos/claude-flow"
echo "   git update-index --assume-unchanged repos/nautilus_trader"
echo "   git update-index --assume-unchanged repos/finplot"