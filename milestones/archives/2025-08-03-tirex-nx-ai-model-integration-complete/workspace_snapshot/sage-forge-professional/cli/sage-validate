#!/usr/bin/env python3
"""
🧪 SAGE-Forge Validation CLI

Professional validation tool for NT-native components.
"""

import sys
import argparse
import subprocess
from pathlib import Path


def validate_strategy(name: str):
    """Validate NT strategy compliance."""
    print(f"🧪 Validating strategy: {name}")
    
    strategy_path = Path(f"src/sage_forge/strategies/{name.lower()}_strategy.py")
    if not strategy_path.exists():
        print(f"❌ Strategy not found: {strategy_path}")
        return False
    
    # Check NT pattern compliance
    content = strategy_path.read_text()
    
    required_patterns = [
        "from nautilus_trader.trading.strategy import Strategy",
        "class " + name + "(Strategy):",
        "def on_start(self):",
        "def on_bar(self, bar: Bar):",
        "def on_stop(self):"
    ]
    
    missing_patterns = []
    for pattern in required_patterns:
        if pattern not in content:
            missing_patterns.append(pattern)
    
    if missing_patterns:
        print(f"❌ Missing NT patterns: {missing_patterns}")
        return False
    
    print(f"✅ Strategy {name} passes NT compliance validation")
    return True


def validate_actor(name: str):
    """Validate NT actor compliance."""
    print(f"🧪 Validating actor: {name}")
    
    actor_path = Path(f"src/sage_forge/actors/{name.lower()}_actor.py")
    if not actor_path.exists():
        print(f"❌ Actor not found: {actor_path}")
        return False
    
    # Check NT pattern compliance
    content = actor_path.read_text()
    
    required_patterns = [
        "from nautilus_trader.common.actor import Actor",
        "class " + name + "(Actor):",
        "def on_start(self):",
        "def on_stop(self):"
    ]
    
    missing_patterns = []
    for pattern in required_patterns:
        if pattern not in content:
            missing_patterns.append(pattern)
    
    if missing_patterns:
        print(f"❌ Missing NT patterns: {missing_patterns}")
        return False
    
    print(f"✅ Actor {name} passes NT compliance validation")
    return True


def validate_imports():
    """Validate all SAGE-Forge imports."""
    print("🧪 Validating SAGE-Forge imports...")
    
    validation_script = '''
import sys
sys.path.insert(0, "src")

try:
    from sage_forge import (
        ArrowDataManager,
        BinanceSpecificationManager,
        EnhancedModernBarDataProvider,
        RealisticPositionSizer,
        FundingActor,
        FinplotActor,
        display_ultimate_performance_summary,
        get_config,
    )
    print("✅ All SAGE-Forge components imported successfully")
except ImportError as e:
    print(f"❌ Import failed: {e}")
    sys.exit(1)
'''
    
    try:
        result = subprocess.run(
            ["python", "-c", validation_script],
            cwd=Path.cwd(),
            capture_output=True,
            text=True,
            check=True
        )
        print("✅ All imports validated")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Import validation failed: {e}")
        print(f"Error: {e.stderr}")
        return False


def main():
    """Main validation CLI entry point."""
    parser = argparse.ArgumentParser(description="SAGE-Forge Validation Tool")
    parser.add_argument("--strategy", help="Validate specific strategy")
    parser.add_argument("--actor", help="Validate specific actor")
    parser.add_argument("--imports", action="store_true", help="Validate all imports")
    parser.add_argument("--all", action="store_true", help="Validate everything")
    
    args = parser.parse_args()
    
    print("🧪 SAGE-Forge Validation CLI")
    
    all_passed = True
    
    if args.strategy:
        all_passed &= validate_strategy(args.strategy)
    
    if args.actor:
        all_passed &= validate_actor(args.actor)
    
    if args.imports or args.all:
        all_passed &= validate_imports()
    
    if args.all:
        # Validate all strategies and actors
        strategies_dir = Path("src/sage_forge/strategies")
        actors_dir = Path("src/sage_forge/actors")
        
        if strategies_dir.exists():
            for strategy_file in strategies_dir.glob("*_strategy.py"):
                strategy_name = strategy_file.stem.replace("_strategy", "").title()
                all_passed &= validate_strategy(strategy_name)
        
        if actors_dir.exists():
            for actor_file in actors_dir.glob("*_actor.py"):
                actor_name = actor_file.stem.replace("_actor", "").title()
                all_passed &= validate_actor(actor_name)
    
    if all_passed:
        print("🎉 All validations passed!")
        sys.exit(0)
    else:
        print("❌ Some validations failed")
        sys.exit(1)


if __name__ == "__main__":
    main()